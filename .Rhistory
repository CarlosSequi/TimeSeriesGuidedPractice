install.packages(tseries)
install.packages("tseries")
library(tseries)
serie = scan("pasajeros_1949_1959.dat")
head(serie)
NTest = 12 # cantidad de datos a usar como test
NPred = 12 # cantidad de predicciones que queremos realizar
serie.ts = ts(serie, frequency = 12) # creamos el objeto serie temporal suponiendo una estacionalidad de 12 meses
plot(decompose(serie.ts))
serie.ts.log = log(serie.ts)
serie.log = log(serie)
plot(decompose(serie.ts))
serie.ts.log = log(serie.ts)
serie.log = log(serie)
plot(decompose(serie.ts.log))
decompose(serie.ts.log)
serieTr = serie.log[1:(length(serie.log)-NTest)]
tiempoTr = 1:length(serieTr)
serieTs = serie.log[(length(serie.log)-NTest+1):length(serie)]
tiempoTs = (tiempoTr[length(tiempoTr)]+1):(tiemporTr[length(tiempoTr)]+NTest)
tiempoTs = (tiempoTr[length(tiempoTr)]+1):(tiempoTr[length(tiempoTr)]+NTest)
length(serie.log)
length(serieTr)
length(serieTs)
tiempoTr
tiempoTs
plot.ts(serieTr, xlim=c(1, tiempoTs[lenght(tiempoTs)]))
plot.ts(serieTr, xlim=c(1, tiempoTs[length(tiempoTs)]))
lines(tiempoTs, serieTs, col="red")
parametros.H1 = lm(serieTr ~tiempoTr)
parametros.H1
parametros.H1 = lm(serieTr ~tiempoTr)
parametros.H1
tendEstimadaTr = parametros.H1$coefficients[1] + tiempoTr*parametros.H1$coefficients[2] # tendencia en entrenamiento
tendEstimadaTs = parametros.H1$coefficients[1] + tiempoTs*parametros.H1$coefficients[2] # tendencia en test
lines(tiempoTr, tendEstimadaTr, col = "blue")
library(tseries)
serie = scan("pasajeros_1949_1959.dat")
NTest = 12 # cantidad de datos a usar como test
NPred = 12 # cantidad de predicciones que queremos realizar
serie.ts = ts(serie, frequency = 12) # creamos el objeto serie temporal suponiendo una estacionalidad de 12 meses
plot(decompose(serie.ts))
serie.ts.log = log(serie.ts)
serie.log = log(serie)
plot(decompose(serie.ts.log))
decompose(serie.ts.log)
serieTr = serie.log[1:(length(serie.log)-NTest)] # tomamos todos los valores de la serie
# como train excepto los 12 últimos
tiempoTr = 1:length(serieTr) # instantes de tiempo de esta serie train
# mismo proceso para la serie de test...
serieTs = serie.log[(length(serie.log)-NTest+1):length(serie)]
tiempoTs = (tiempoTr[length(tiempoTr)]+1):(tiempoTr[length(tiempoTr)]+NTest)
plot.ts(serieTr, xlim=c(1, tiempoTs[length(tiempoTs)]))
lines(tiempoTs, serieTs, col="red")
parametros.H1 = lm(serieTr ~tiempoTr)
parametros.H1
tendEstimadaTr = parametros.H1$coefficients[1] + tiempoTr*parametros.H1$coefficients[2] # tendencia en entrenamiento
tendEstimadaTs = parametros.H1$coefficients[1] + tiempoTs*parametros.H1$coefficients[2] # tendencia en test
lines(tiempoTr, tendEstimadaTr, col = "blue")
plot.ts(serieTr, xlim=c(1, tiempoTs[length(tiempoTs)]))
lines(tiempoTs, serieTs, col="red")
lines(tiempoTr, tendEstimadaTr, col = "blue")
lines(tiempoTs, tendEstimadasr, col = "green")
plot.ts(serieTr, xlim=c(1, tiempoTs[length(tiempoTs)]))
lines(tiempoTs, serieTs, col="red")
lines(tiempoTr, tendEstimadaTr, col = "blue")
lines(tiempoTs, tendEstimadaTs, col = "green")
JB.tr = jarque.bera.test(parametros.H1$residuals)
JB.ts = jarque.bera.test(tendEstimadaTs-serie.test)
parametros.H1
parametros.H1$residuals
JB.tr = jarque.bera.test(parametros.H1$residuals)
JB.ts = jarque.bera.test(tendEstimadaTs-serieTs)
JB.tr
JB.ts
TT = t.test(c(parametros.H1$residuals, tendEstimadaTs.H1-serieTs))
TT = t.test(c(parametros.H1$residuals, tendEstimadaTs-serieTs))
TT
serieTr.SinTend = serieTr - tendEstimadaTr
serieTs.SinTend = serieTs - tendEstimadaTs
serieTr.SinTend = serieTr - tendEstimadaTr
serieTs.SinTend = serieTs - tendEstimadaTs
# comprobamos como queda:
plot.ts(serieTr.SinTend, xlim=c(1, tiempoTs[length(tiempoTs)]))
lines(tiempoTs, serieTs.SinTend, col="red")
aux = rep(estacionalidad, length(serieTr.SinTend/length(estacionalidad)))
k = 12 # aquí guardamos los datos estacionales
estacionalidad = decompose(serie.ts.log)$seasonal[1:k] # tal como dijimos antes usamos el atributo seasonal
# para calcular los k=12 valores de estacionalidad
# que se van repitiendo en la estacionalidad
aux = rep(estacionalidad, length(serieTr.SinTend/length(estacionalidad)))
length(serieTr.SinTend/length(estacionalidad)
)
estacionalidad
length(serieTr.SinTend)/length(estacionalidad)
# repetimos la estacionalidad para ello, tantas veces como valores haya en la serie
aux = rep(estacionalidad, length(serieTr.SinTend)/length(estacionalidad))
aux
# repetimos la estacionalidad para ello, tantas veces como valores haya en la serie
aux = rep(estacionalidad, length(serieTr.SinTend)/length(estacionalidad))
# quitamos la estacionalidad a train y test
serieTr.SinTend.SinEst = serieTr.SinTend - aux
serieTs.SinTend.SinEst = serieTs.SinTend - estacionalidad # no usamos aux porque estacionalidad
# tiene la misma cantidad de valores que
# serieTs.SinTend
# comprobamos como queda:
plot.ts(serieTr.SinTend.SinEst, xlim=c(1, tiempoTs[length(tiempoTs)]))
lines(tiempoTs, serieTs.SinTend.SinEst, col="red")
acf(serieTr.SinTend.SinEst)
ADFTr = adf.test(serieTr.SinTend.SinEst)
ADFTr
serieTr.SinTend.SinEst.Diff = diff(serieTr.SinTend.SinEst) # diferenciación en una unidad de la serie anterior
serieTs.SinTend.SinEst.Diff = diff(serieTs.SinTend.SinEst)
# le pasamos el test de nuevo para comprobar si es estacionaria
ADFTr2 = adf.test(serieTr.SinTend.SinEst.Diff)
ADFTr2
acf(serieTr.SinTend.SinEst.Diff)
printf("Presione tecla para continuar")
pacf(serieTr.SinTend.SinEst.Diff)
# calculamos el modelo
# la diferenciación la introducimos dentro del modelo, por tanto usamos serieTr.SinTend.SinEst
modelo = arima(serieTr.SinTend.SinEst, order = c(4,1,0)) # 0 indica que no es de medias moviles
# vemos los residuos del modelo, que al ser un modelo autoregresivo lo calculamos como residuos+serie
valoresReconstruidos = serieTr.SinTend.SinEst + modelo$residuals # valores reconstruidos de la serie
# con el modelo que tenemos
# calculamos las predicciones
predicciones = predict(modelo, n.ahead = NPred)
valoresPredichos = predicciones$pred
# calculamos el modelo
# la diferenciación la introducimos dentro del modelo, por tanto usamos serieTr.SinTend.SinEst
modelo = arima(serieTr.SinTend.SinEst, order = c(4,1,0)) # 0 indica que no es de medias moviles
# vemos los residuos del modelo, que al ser un modelo autoregresivo lo calculamos como residuos+serie
valoresReconstruidos = serieTr.SinTend.SinEst + modelo$residuals # valores reconstruidos de la serie
# con el modelo que tenemos
# calculamos las predicciones
predicciones = predict(modelo, n.ahead = NPred)
valoresPredichos = predicciones$pred
valoresPredichos
# calculamos el modelo
# la diferenciación la introducimos dentro del modelo, por tanto usamos serieTr.SinTend.SinEst
modelo = arima(serieTr.SinTend.SinEst, order = c(4,1,0)) # 0 indica que no es de medias moviles
# vemos los residuos del modelo, que al ser un modelo autoregresivo lo calculamos como residuos+serie
valoresReconstruidos = serieTr.SinTend.SinEst + modelo$residuals # valores reconstruidos de la serie
# con el modelo que tenemos
# calculamos las predicciones
predicciones = predict(modelo, n.ahead = NPred)
valoresPredichos = predicciones$pred
valoresPredichos
# calculamos el error cuadrático acumulado del ajuste en ajuste y test
errorTr = sum((modelo$residuals)^2)
errorTs = sum((valoresPredichos - serieTs.SinTend.SinEst) ^2)
# calculamos el modelo
# la diferenciación la introducimos dentro del modelo, por tanto usamos serieTr.SinTend.SinEst
modelo = arima(serieTr.SinTend.SinEst, order = c(4,1,0)) # 0 indica que no es de medias moviles
# vemos los residuos del modelo, que al ser un modelo autoregresivo lo calculamos como residuos+serie
valoresReconstruidos = serieTr.SinTend.SinEst + modelo$residuals # valores reconstruidos de la serie
# con el modelo que tenemos
# calculamos las predicciones
predicciones = predict(modelo, n.ahead = NPred)
valoresPredichos = predicciones$pred
valoresPredichos
# calculamos el error cuadrático acumulado del ajuste en ajuste y test
errorTr = sum((modelo$residuals)^2)
errorTs = sum((valoresPredichos - serieTs.SinTend.SinEst) ^2)
errorTr
errorTs
plot.ts(serieTr.SinTend.SinEst, xlim=c(1, tiempoTs[length(tiempoTs)]))
lines(valoresReconstruidos, col="blue")
lines(serieTs.SinTend.SinEst, col="red")
lines(valoresPredichos, col="green")
plot.ts(serieTr.SinTend.SinEst, xlim=c(1, tiempoTs[length(tiempoTs)]))
lines(valoresReconstruidos, col="blue")
lines(tiempoTs,serieTs.SinTend.SinEst, col="red")
lines(tiempoTs,valoresPredichos, col="green")
# Test de Box-Pierce: comprobamos que los residuos que nos quedan son aleatorios
BTtest = Box.test(modelo&residuals)
# Test de Box-Pierce: comprobamos que los residuos que nos quedan son aleatorios
BTtest = Box.test(modelo$residuals)
BTtest
JBt = jarque.bera.test(modelo$residuals)
JBt = jarque.bera.test(modelo$residuals)
JBt
swt = shapiro.test(modelo$residuals)
swt
hist(modelo$residuals, col="blue", prob=TRUE, ylim=c(0,20), xlim=c(-0.2,0.2))
lines(density(modelo$residuals))
# Incluimos la estacionalidad
valoresReconstruidos.Est = valoresReconstruidos + aux
valoresPredichos.Est = valoresPredichos + estacionalidad
# Incluimos la tendencia
valoresReconstruidos.Est.Tend = valoresReconstruidos.Est + tendEstimadaTr
valoresPredichos.Est.Tend = valoresPredichos.Est + tendEstimadaTs
# Transformación de los logaritmos
valoresReconstruidos.Est.Tend.exp = exp(valoresReconstruidos.Est.Tend)
valoresPredichos.Est.Tend.exp = exp(valoresPredichos.Est.Tend)
plot.ts(serie)
lines(tiempoTr, valoresReconstruidos.Est.Tend.exp, col = "blue")
lines(tiempoTs, valoresPredichos.Est.Tend.exp, col = "green")
plot.ts(serie, xlim=c(1, tiempoTs[length(tiempoTs)]))
tiempo = length(serie)
parametros.H1 = lm(serie ~tiempo)
tiempo = 1:length(serie)
parametros.H1 = lm(serie ~tiempo)
parametros.H1
tiempo = 1:length(serie)
parametros.H1 = lm(serie ~tiempo)
tendEstimada = parametros.H1$coefficients[1] + tiempo*parametros.H1$coefficients[2]
serie.SinTend = serie - tendEstimada
tiempo = 1:length(serie)
parametros.H1 = lm(serie ~tiempo)
tendEstimada = parametros.H1$coefficients[1] + tiempo*parametros.H1$coefficients[2]
serie.SinTend = serie - tendEstimada
plot.ts(serie.SinTend, xlim=c(1, tiempo[length(tiempo)]))
k = 12 # aquí guardamos los datos estacionales
estacionalidad = decompose(serie.ts.log)$seasonal[1:k]
aux = rep(estacionalidad, length(serie.SinTend)/length(estacionalidad))
serie.SinTend.SinEst = serie.SinTend - aux
plot.ts(serie.SinTend.SinEst, xlim=c(1, tiempo[length(tiempo)]))
library(tseries)
serie = scan("pasajeros_1949_1959.dat")
NTest = 12 # cantidad de datos a usar como test
NPred = 12 # cantidad de predicciones que queremos realizar
serie.ts = ts(serie, frequency = 12) # creamos el objeto serie temporal
# suponiendo una estacionalidad de 12 meses
plot(decompose(serie.ts))
serie.ts.log = log(serie.ts)
serie.log = log(serie)
plot(decompose(serie.ts.log))
decompose(serie.ts.log)
serieTr = serie.log[1:(length(serie.log)-NTest)] # tomamos todos los valores de la serie
# como train excepto los 12 últimos
tiempoTr = 1:length(serieTr) # instantes de tiempo de esta serie train
# mismo proceso para la serie de test...
serieTs = serie.log[(length(serie.log)-NTest+1):length(serie)]
tiempoTs = (tiempoTr[length(tiempoTr)]+1):(tiempoTr[length(tiempoTr)]+NTest)
plot.ts(serieTr, xlim=c(1, tiempoTs[length(tiempoTs)]))
lines(tiempoTs, serieTs, col="red")
parametros.H1 = lm(serieTr ~tiempoTr)
parametros.H1
# tendencia en entrenamiento
tendEstimadaTr = parametros.H1$coefficients[1] + tiempoTr*parametros.H1$coefficients[2]
# tendencia en test
tendEstimadaTs = parametros.H1$coefficients[1] + tiempoTs*parametros.H1$coefficients[2]
plot.ts(serieTr, xlim=c(1, tiempoTs[length(tiempoTs)]))
lines(tiempoTs, serieTs, col="red")
lines(tiempoTr, tendEstimadaTr, col = "blue")
lines(tiempoTs, tendEstimadaTs, col = "green")
JB.tr = jarque.bera.test(parametros.H1$residuals)
JB.ts = jarque.bera.test(tendEstimadaTs-serieTs)
JB.tr
JB.ts
TT = t.test(c(parametros.H1$residuals, tendEstimadaTs-serieTs))
TT
serieTr.SinTend = serieTr - tendEstimadaTr
serieTs.SinTend = serieTs - tendEstimadaTs
# comprobamos como queda:
plot.ts(serieTr.SinTend, xlim=c(1, tiempoTs[length(tiempoTs)]))
lines(tiempoTs, serieTs.SinTend, col="red")
k = 12 # aquí guardamos los datos estacionales
estacionalidad = decompose(serie.ts.log)$seasonal[1:k] # tal como dijimos antes usamos
# el atributo seasonal
# para calcular los k=12 valores
# de estacionalidad
# que se van repitiendo en la estacionalidad
# repetimos la estacionalidad para ello, tantas veces como valores haya en la serie
aux = rep(estacionalidad, length(serieTr.SinTend)/length(estacionalidad))
# quitamos la estacionalidad a train y test
serieTr.SinTend.SinEst = serieTr.SinTend - aux
serieTs.SinTend.SinEst = serieTs.SinTend - estacionalidad # no usamos aux porque estacionalidad
# tiene la misma cantidad de valores que
# serieTs.SinTend
# comprobamos como queda:
plot.ts(serieTr.SinTend.SinEst, xlim=c(1, tiempoTs[length(tiempoTs)]))
lines(tiempoTs, serieTs.SinTend.SinEst, col="red")
acf(serieTr.SinTend.SinEst)
ADFTr = adf.test(serieTr.SinTend.SinEst)
ADFTr
serieTr.SinTend.SinEst.Diff = diff(serieTr.SinTend.SinEst) # diferenciación en una unidad
# de la serie anterior
serieTs.SinTend.SinEst.Diff = diff(serieTs.SinTend.SinEst)
# le pasamos el test de nuevo para comprobar si es estacionaria
ADFTr2 = adf.test(serieTr.SinTend.SinEst.Diff)
ADFTr2
acf(serieTr.SinTend.SinEst.Diff)
pacf(serieTr.SinTend.SinEst.Diff)
# calculamos el modelo
# la diferenciación la introducimos dentro del modelo, por tanto usamos serieTr.SinTend.SinEst
modelo = arima(serieTr.SinTend.SinEst, order = c(4,1,0)) # 0 indica que no es de medias moviles
# vemos los residuos del modelo, que al ser un modelo autoregresivo lo calculamos como residuos+serie
valoresReconstruidos = serieTr.SinTend.SinEst + modelo$residuals # valores reconstruidos de la serie
# con el modelo que tenemos
# calculamos las predicciones
predicciones = predict(modelo, n.ahead = NPred)
valoresPredichos = predicciones$pred
valoresPredichos
# calculamos el error cuadrático acumulado del ajuste en ajuste y test
errorTr = sum((modelo$residuals)^2)
errorTs = sum((valoresPredichos - serieTs.SinTend.SinEst) ^2)
errorTr
errorTs
plot.ts(serieTr.SinTend.SinEst, xlim=c(1, tiempoTs[length(tiempoTs)]))
lines(valoresReconstruidos, col="blue")
lines(tiempoTs,serieTs.SinTend.SinEst, col="red")
lines(tiempoTs,valoresPredichos, col="green")
BTtest = Box.test(modelo$residuals)
BTtest
JBt = jarque.bera.test(modelo$residuals)
JBt
swt = shapiro.test(modelo$residuals)
swt
hist(modelo$residuals, col="blue", prob=TRUE, ylim=c(0,20), xlim=c(-0.2,0.2))
lines(density(modelo$residuals))
# Incluimos la estacionalidad
valoresReconstruidos.Est = valoresReconstruidos + aux
valoresPredichos.Est = valoresPredichos + estacionalidad
# Incluimos la tendencia
valoresReconstruidos.Est.Tend = valoresReconstruidos.Est + tendEstimadaTr
valoresPredichos.Est.Tend = valoresPredichos.Est + tendEstimadaTs
# Transformación de los logaritmos
valoresReconstruidos.Est.Tend.exp = exp(valoresReconstruidos.Est.Tend)
valoresPredichos.Est.Tend.exp = exp(valoresPredichos.Est.Tend)
plot.ts(serie)
lines(tiempoTr, valoresReconstruidos.Est.Tend.exp, col = "blue")
lines(tiempoTs, valoresPredichos.Est.Tend.exp, col = "green")
plot.ts(serie, xlim=c(1, tiempoTs[length(tiempoTs)]))
tiempo = 1:length(serie)
parametros.H1 = lm(serie ~tiempo)
tendEstimada = parametros.H1$coefficients[1] + tiempo*parametros.H1$coefficients[2]
serie.SinTend = serie - tendEstimada
plot.ts(serie.SinTend, xlim=c(1, tiempo[length(tiempo)]))
k = 12 # aquí guardamos los datos estacionales
estacionalidad = decompose(serie.ts.log)$seasonal[1:k]
aux = rep(estacionalidad, length(serie.SinTend)/length(estacionalidad))
serie.SinTend.SinEst = serie.SinTend - aux
plot.ts(serie.SinTend.SinEst, xlim=c(1, tiempo[length(tiempo)]))
